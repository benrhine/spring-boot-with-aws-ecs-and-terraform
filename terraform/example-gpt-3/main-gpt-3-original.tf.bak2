

# --------------------
# Security Groups
# --------------------
# resource "aws_security_group" "ecs_sg" {
#   vpc_id = aws_vpc.ecs_vpc.id
#
#   # Allow traffic from ALB only
#   ingress {
#     from_port       = 32768
#     to_port         = 61000
#     protocol        = "tcp"
#     security_groups = [aws_security_group.alb_sg.id]
#   }
#
#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
# }

# --------------------
# Launch Template for ECS EC2
# --------------------
# resource "aws_launch_template" "gpt_3_ecs_lt" {
#   name_prefix   = "ecs-ec2-gpt-3-"
#   image_id      = data.aws_ami.ecs_ami.id
#   instance_type = "t3.micro"
#
#   iam_instance_profile {
#     name = aws_iam_instance_profile.ecs_instance_profile.name
#   }
#
#   network_interfaces {
#     associate_public_ip_address = true
#     # This one has different security groups, it is using the special security group in this
#     # example, not the shared security group
#     security_groups             = [aws_security_group.ecs_sg.id]
#   }
#
#   user_data = base64encode(<<EOF
# #!/bin/bash
# echo ECS_CLUSTER=${aws_ecs_cluster.main.name} >> /etc/ecs/ecs.config
# EOF
#   )
# }

# --------------------
# Load Balancer (ALB)
# --------------------
resource "aws_lb" "nginx_alb" {
  name               = "nginx-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = [aws_subnet.public.id, aws_subnet.public_b.id]
}

resource "aws_lb_target_group" "nginx_tg" {
  name     = "nginx-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.ecs_vpc.id

  target_type = "instance"

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
    matcher             = "200"
  }
}

resource "aws_lb_listener" "nginx_listener" {
  load_balancer_arn = aws_lb.nginx_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.nginx_tg.arn
  }
}

# --------------------
# ECS Task Definition (Dynamic Port Mapping)
# --------------------
resource "aws_ecs_task_definition" "nginx" {
  family                   = "nginx"
  requires_compatibilities = ["EC2"]
  network_mode             = "bridge"
  cpu                      = "256"
  memory                   = "512"

  container_definitions = jsonencode([
    {
      name      = "nginx"
      image     = "nginx:latest"
      essential = true
      portMappings = [{
        containerPort = 80
        hostPort      = 0    # dynamic port mapping
        protocol      = "tcp"
      }]
    }
  ])
}

# --------------------
# ECS Service
# --------------------
resource "aws_ecs_service" "nginx" {
  name            = "nginx-service"
  cluster         = aws_ecs_cluster.main.id
  task_definition = aws_ecs_task_definition.nginx.arn
  launch_type     = "EC2"
  desired_count   = 1

  load_balancer {
    target_group_arn = aws_lb_target_group.nginx_tg.arn
    container_name   = "nginx"
    container_port   = 80
  }

  depends_on = [
    aws_autoscaling_group.ecs_asg,
    aws_lb_listener.nginx_listener
  ]
}

# --------------------
# Output
# --------------------
output "alb_dns_name" {
  value       = aws_lb.nginx_alb.dns_name
  description = "The DNS name of the ALB to access your NGINX container"
}
